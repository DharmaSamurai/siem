[33mcommit a8acf189b31adac2499035f976a65b83d5cd05fd[m
Author: DharmaSamurai <dharma.samurai@gmail.com>
Date:   Wed Nov 16 15:55:40 2016 +0200

    initial project version

[1mdiff --git a/client.py b/client.py[m
[1mnew file mode 100644[m
[1mindex 0000000..115f125[m
[1m--- /dev/null[m
[1m+++ b/client.py[m
[36m@@ -0,0 +1,65 @@[m
[32m+[m[32m#! /usr/bin/env python3[m
[32m+[m[32m# -*- coding: utf-8 -*-[m
[32m+[m
[32m+[m[32mimport requests[m
[32m+[m[32mimport uuid[m
[32m+[m
[32m+[m[32mfrom Crypto.Cipher import AES, PKCS1_OAEP[m
[32m+[m[32mfrom Crypto.Random import get_random_bytes[m
[32m+[m[32mfrom Crypto.PublicKey import RSA[m
[32m+[m
[32m+[m[32m# from base64 import b64decode[m
[32m+[m
[32m+[m
[32m+[m[32mPUBKEY_TEMPLATE = "-----BEGIN PUBLIC KEY-----\n{}\n-----END PUBLIC KEY-----"[m
[32m+[m
[32m+[m
[32m+[m[32mdef rand_num():[m
[32m+[m	[32m''' —Å–æ–∑–¥–∞–µ—Ç 128-–±–∏—Ç–Ω–æ–µ —á–∏—Å–ª–æ '''[m
[32m+[m	[32mnumber = str(uuid.uuid4().int)[m
[32m+[m	[32mnumber = number.encode('utf-8')[m
[32m+[m	[32mreturn number[m
[32m+[m
[32m+[m
[32m+[m[32mdef generate_keys():[m
[32m+[m	[32m''' –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç RSA –∫–ª—é—á–∏ '''[m
[32m+[m	[32msecret_code = "Unguessable"[m
[32m+[m	[32mkey = RSA.generate(2048)[m
[32m+[m	[32mencrypted_key = key.exportKey(passphrase=secret_code, pkcs=8)[m
[32m+[m	[32mpublic_key = key.publickey().exportKey()[m
[32m+[m	[32mkeys = [encrypted_key, public_key][m
[32m+[m	[32mreturn keys[m
[32m+[m
[32m+[m
[32m+[m[32mdef crypt_rsa(data, key):[m
[32m+[m	[32m''' —à–∏—Ñ—Ä—É–µ—Ç RSA –¥–∞–Ω–Ω—ã–µ data –∫–ª—é—á–µ–º key '''[m
[32m+[m	[32mkey = RSA.importKey(key)[m
[32m+[m	[32mcipher = PKCS1_OAEP.new(key)[m
[32m+[m	[32mreturn cipher.encrypt(data)[m
[32m+[m
[32m+[m
[32m+[m[32m# def decrypt_rsa(data, key):[m
[32m+[m[32m# 	''' –¥–µ—à–∏—Ñ—Ä—É–µ—Ç RSA –¥–∞–Ω–Ω—ã–µ data –∫–ª—é—á–µ–º key '''[m
[32m+[m[32m# 	key = RSA.importKey(key)[m
[32m+[m[32m# 	cipher = PKCS1_OAEP.new(key)[m
[32m+[m[32m# 	decrypted = cipher.decrypt(b64decode(data))[m
[32m+[m[32m# 	return decrypted[m
[32m+[m
[32m+[m
[32m+[m[32m# TEST[m
[32m+[m[32mdata = rand_num()[m
[32m+[m[32mkeys = generate_keys()[m
[32m+[m[32msecret_key = keys[0][m
[32m+[m[32mpub_key = keys[1][m
[32m+[m
[32m+[m[32mprint('RANDOM NUM IS HERE: ', data)[m
[32m+[m
[32m+[m[32mencrptd = crypt_rsa(data, pub_key)[m
[32m+[m[32mprint('Encrypted with RSA: ', encrptd)[m
[32m+[m
[32m+[m[32m# decrptd = decrypt_rsa(encrptd, secret_key)[m
[32m+[m[32m# print('Decrypted with RSA: ', decrptd)[m
[32m+[m
[32m+[m[32m# Sending message[m
[32m+[m[32mr = requests.post("http://127.0.0.1:5000", data=data)[m
[32m+[m[32mprint('Data sent: ', data)[m
\ No newline at end of file[m
[1mdiff --git a/server.py b/server.py[m
[1mnew file mode 100644[m
[1mindex 0000000..f63d86b[m
[1m--- /dev/null[m
[1m+++ b/server.py[m
[36m@@ -0,0 +1,15 @@[m
[32m+[m[32m#! /usr/bin/env python3[m
[32m+[m[32m# -*- coding: utf-8 -*-[m
[32m+[m
[32m+[m[32mfrom flask import Flask, Response, request[m[41m [m
[32m+[m
[32m+[m[32mapp = Flask(__name__)[m
[32m+[m
[32m+[m[32m@app.route('/', methods=['POST', 'GET'])[m
[32m+[m[32mdef get_data():[m
[32m+[m	[32mif request.method == 'POST':[m
[32m+[m		[32mprint('Recieved from client: ', request.data)[m
[32m+[m	[32mreturn Response('OK')[m
[32m+[m
[32m+[m[32mif __name__ == '__main__':[m
[32m+[m	[32mapp.run(debug=True)[m
\ No newline at end of file[m
